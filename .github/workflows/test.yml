name: Test

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:

#
# PyPI
#

  Source:
    runs-on: ubuntu-20.04
    name: Source

    steps:
    - name: üß∞ Checkout
      uses: actions/checkout@v2
      with:
        # Always clone the full depth so git-describe works.
        fetch-depth: 0
        submodules: true

    - name: Install dependencies (Ubuntu)
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake default-jre-headless uuid-dev libantlr4-runtime-dev

    - name: üêç Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install build dependencies
      run: |
        pip install -U pip
        pip install -r requirements.txt
        python update_version.py

    - name: Install package dependencies
      run: |
        python setup.py install

    - name: üöß Build distribution üì¶
      run: |
        python setup.py sdist

    - name: Check distribution üì¶
      run: |
        twine check dist/*

    - name: üì§ Publish source to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TEST_PASSWORD }}
      if: env.TWINE_PASSWORD != null
      run: |
        twine upload --skip-existing --verbose --repository testpypi dist/*.tar.gz

    - name: üì§ Publish source to PyPI
      if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request' && github.repository == 'SymbiFlow/fasm'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        twine upload dist/*

  Linux:
    strategy:
      matrix:
        include:
          - { name: '3.6', python-version: 'cp36-cp36m' }
          - { name: '3.7', python-version: 'cp37-cp37m' }
          - { name: '3.8', python-version: 'cp38-cp38' }
          - { name: '3.9', python-version: 'cp39-cp39' }
      fail-fast: false

    name: '${{ matrix.name }} ‚Ä¢ manylinux'
    runs-on: ubuntu-latest

    steps:
    - name: üß∞ Checkout
      uses: actions/checkout@v2
      with:
        # Always clone the full depth so git-describe works.
        fetch-depth: 0
        submodules: true

    - name: üêç Set up Python
      uses: actions/setup-python@v2

    - name: Install build dependencies
      run: |
        pip install -U pip
        pip install twine auditwheel
        python update_version.py

    - name: üöß Build distribution üì¶
      uses: RalfG/python-wheels-manylinux-build@v0.3.3-manylinux2010_x86_64
      with:
        build-requirements: 'cython'
        pre-build-command: 'bash .github/workflows/manylinux-install-cmake.sh'
        python-versions: ${{ matrix.python-version }}
        #pip-wheel-args: '-w ./dist --no-deps --verbose'

    - name: List distribution üì¶
      run: |
        # Fix permissions
        echo "::group::Fixing permission"
        ls -l dist/*
        echo $USER
        whoami
        sudo chown -R $USER dist
        ls -l dist/*
        echo "::endgroup::"
        # Remove the non-manylinux versions
        rm -v dist/*linux_x86_64*.whl
        ls -l dist/*

    - name: Check distribution üì¶
      run: |
        for WHEEL in dist/*.whl; do
          echo
          echo "::group::Checking $WHEEL"
          echo
          python -m zipfile --list $WHEEL
          echo
          auditwheel show $WHEEL
          echo
          twine check $WHEEL
          echo
          echo "::endgroup::"
        done

    - name: üì§ Publish wheels to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TEST_PASSWORD }}
      if: env.TWINE_PASSWORD != null
      run: |
        twine upload --skip-existing --verbose --repository testpypi dist/*.whl

    - name: üì§ Publish wheels to PyPI
      if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request' && github.repository == 'SymbiFlow/fasm'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        twine upload dist/*.whl

  MacAndWindows:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        python-version: [ '3.6', '3.7', '3.8', '3.9', 'pypy-3.6', 'pypy-3.7' ]
      fail-fast: false

    name: ${{ matrix.python-version }} ‚Ä¢ ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
    - name: üß∞ Checkout
      uses: actions/checkout@v2
      with:
        # Always clone the full depth so git-describe works.
        fetch-depth: 0
        submodules: true

    - name: Install dependencies (Mac OS X)
      if: startsWith(matrix.os, 'macos')
      run: |
        true

    - name: Install dependencies (Windows)
      if: startsWith(matrix.os, 'windows')
      run: |
        true

    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install build dependencies
      run: |
        pip install -U pip
        pip install -r requirements.txt
        python update_version.py

    - name: Install package dependencies
      run: |
        python setup.py install

    - name: üöß Build distribution üì¶
      run: |
        python setup.py bdist_wheel

    - name: Check distribution üì¶
      shell: bash
      run: |
        python -m zipfile -l dist/*
        echo
        twine check dist/*

    - name: üì§ Publish wheels to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TEST_PASSWORD }}
      if: env.TWINE_PASSWORD != null
      run: |
        twine upload --skip-existing --verbose --repository testpypi dist/*.whl

    - name: üì§ Publish wheels to PyPI
      if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request' && github.repository == 'SymbiFlow/fasm'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        twine upload dist/*.whl

#
# presubmit
#

  presubmit-check:
    name: Source checks
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          # Always clone the full depth so git-describe works.
          fetch-depth: 0
          submodules: true
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install clang-format
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Python style check
        run: |
          make format lint
          test $(git status --porcelain | wc -l) -eq 0 || { git diff; false; }
      - name: C++ style check
        run: |
          make format-cpp
          test $(git status --porcelain | wc -l) -eq 0 || { git diff; false; }
      - name: Check license
        run: make check-license
      - name: Python checks
        run: make check-python-scripts

  presubmit-test:
    name: Test Python package
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        antlr_runtime_type: [static, shared]
        python_version: [3.5, 3.6, 3.7, 3.8, 3.9]
        include:
          - python-version: 3.5
            TOXENV: py35
          - python-version: 3.6
            TOXENV: py36
          - python-version: 3.7
            TOXENV: py37
          - python-version: 3.8
            TOXENV: py38
          - python-version: 3.9
            TOXENV: py39
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
        with:
          # Always clone the full depth so git-describe works.
          fetch-depth: 0
          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install cmake default-jre-headless uuid-dev libantlr4-runtime-dev
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python update_version.py
      - name: Tox
        run: ANTLR4_RUNTIME_TYPE=${{ matrix.antlr_runtime_type }} tox -e ${{ matrix.TOXENV }}

#
# Wheels
#

  wheels:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.5, 3.6, 3.7, 3.8, 3.9]
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
      with:
        # Always clone the full depth so git-describe works.
        fetch-depth: 0
        submodules: true
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install cmake default-jre-headless uuid-dev libantlr4-runtime-dev
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: python -m pip install --upgrade -r requirements.txt
    - name: Generate version
      run: python update_version.py
    - name: Build wheels
      run: python setup.py bdist_wheel
    - name: Test wheel installation
      run: |
        python -m pip install dist/*.whl
        (cd tests; python test_simple.py)
    - uses: actions/upload-artifact@v2
      with:
        name: fasm
        path: dist
