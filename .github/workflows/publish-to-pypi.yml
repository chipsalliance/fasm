# Copyright (C) 2017-2021  The SymbiFlow Authors.
#
# Use of this source code is governed by a ISC-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/ISC
#
# SPDX-License-Identifier: ISC

# !! WARNING !!
# Do not modify this file directly!
# !! WARNING !!
#
# It is generated from: ../workflows-src/publish-to-pypi.yml
# using the script from https://github.com/mithro/actions-includes@main

on:
  push:
  pull_request:
  workflow_dispatch:
name: PyPI
jobs:
  Source:
    name: Source
    runs-on: ubuntu-20.04
    steps:
    - uses: mithro/actions-includes@main
      if: runner.os == 'Linux'
      continue-on-error: false
      with:
        workflow: .github/workflows/publish-to-pypi.yml
    - name: üß∞ Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: 3.x
    - name: Install latest pip
      run: |
        pip install -U pip
    - name: Install packaging tooling
      run: |
        pip install twine wheel auditwheel build
    - name: Install development tools
      run: |
        pip install -r requirements.txt
    - name: üöß Build distribution üì¶
      run: |
        python -m build --sdist --no-isolation .
    - name: ‚úîÔ∏é Check üì¶
      shell: bash
      run: |
        shopt -s nullglob
        for SRC in dist/*.zip; do
          echo
          echo "::group::Checking $SRC"
          echo
          python -m zipfile --test $SRC
          python -m zipfile --list $SRC
          echo
          twine check $SRC
          echo
          echo "::endgroup::"
        done
        for SRC in dist/*.t*gz; do
          echo
          echo "::group::Checking $SRC"
          echo
          python -m tarfile --list $SRC
          echo
          twine check $SRC
          echo
          echo "::endgroup::"
        done
    - name: Upload wheel
      uses: actions/upload-artifact@v2
      with:
        name: source-${{ runner.os }}
        path: dist
    - name: üì§ Publish source to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TEST_PASSWORD }}
      if: ${{ env.TWINE_PASSWORD != null }}
      run: |
        twine upload --skip-existing --verbose --repository testpypi dist/*
    - name: üì§ Publish source to PyPI
      if: ${{ github.ref == 'refs/heads/master' && github.event_name != 'pull_request' && startsWith('SymbiFlow', github.repository) && env.TWINE_PASSWORD != null }}
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        twine upload dist/*
  Wheels-Linux:
    strategy:
      matrix:
        python-version:
        - '3.6'
        - '3.7'
        - '3.8'
        - '3.9'
      fail-fast: false
    name: ${{ matrix.python-version }} ‚Ä¢ manylinux
    runs-on: ubuntu-20.04
    steps:
    - uses: mithro/actions-includes@main
      if: runner.os == 'Linux'
      continue-on-error: false
      with:
        workflow: .github/workflows/publish-to-pypi.yml
    - name: üß∞ Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    - name: Config Check
      if: ${{ !startsWith(runner.os, 'Linux') }}
      run: |
        echo "Use"
        echo
        echo "  SymbiFlow/actions/includes/python/publish-to-pypi-sheels-bin-other"
        echo
        echo "for Windows / Mac"
        echo
        exit 1
    - name: Install packaging tooling on runner
      run: |
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        export PATH=$HOME/.local/bin:$PATH
        pip install -U pip twine wheel auditwheel
    - name: Check packaging tooling on runner
      run: |
        echo $PATH
        which pip
        which twine
        which wheel
        which auditwheel
    - name: Workout manylinux-version
      id: manylinux
      shell: python
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
      run: |
        import os
        MANYLINUX = {
            "3.6": "cp36-cp36m",
            "3.7": "cp37-cp37m",
            "3.8": "cp38-cp38",
            "3.9": "cp39-cp39",
        }[os.environ['PYTHON_VERSION']]
        print("::set-output name=version::"+MANYLINUX)
    - name: üöß Build distribution üì¶
      uses: RalfG/python-wheels-manylinux-build@v0.3.3-manylinux2010_x86_64
      with:
        build-requirements: cython
        system-packages: java-1.8.0-openjdk uuid uuid-devel libuuid libuuid-devel git
        python-versions: ${{ steps.manylinux.outputs.version }}
        pre-build-command: bash .github/workflows/manylinux-install-cmake.sh
        package-path: ''
        pip-wheel-args: -w ./dist --no-deps --verbose
    - name: List distribution üì¶
      run: |
        # Fix permissions
        echo "::group::Fixing permission"
        ls -l dist/*
        echo $USER
        whoami
        sudo chown -R $USER dist
        ls -l dist/*
        echo "::endgroup::"
        # Remove the non-manylinux versions
        rm -v dist/*linux_x86_64*.whl
        ls -l dist/*
    - name: ‚úîÔ∏é Check üì¶
      shell: bash
      run: |
        for WHEEL in dist/*.whl; do
          echo
          echo "::group::Checking $WHEEL"
          echo
          python -m zipfile -t $WHEEL
          python -m zipfile -l $WHEEL
          echo
          if [ "$(uname)" = "Linux" ]; then
            auditwheel show $WHEEL
          fi
          echo
          twine check $WHEEL
          echo
          echo "::endgroup::"
        done
    - name: Upload wheel
      uses: actions/upload-artifact@v2
      with:
        name: wheels-${{ runner.os }}
        path: dist
    - name: üì§ Publish wheels to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TEST_PASSWORD }}
      if: ${{ env.TWINE_PASSWORD != null }}
      run: |
        twine upload --skip-existing --verbose --repository testpypi dist/*
    - name: üì§ Publish source to PyPI
      if: ${{ github.ref == 'refs/heads/master' && github.event_name != 'pull_request' && startsWith('SymbiFlow', github.repository) && env.TWINE_PASSWORD != null }}
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        twine upload dist/*
  Wheels-Other:
    strategy:
      matrix:
        os:
        - windows-latest
        - macos-latest
        python-version:
        - '3.6'
        - '3.7'
        - '3.8'
        - '3.9'
      fail-fast: false
    name: ${{ matrix.python-version }} ‚Ä¢ ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: mithro/actions-includes@main
      if: runner.os == 'Linux'
      continue-on-error: false
      with:
        workflow: .github/workflows/publish-to-pypi.yml
    - name: üß∞ Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    - name: Config Check
      if: ${{ startsWith(runner.os, 'Linux') }}
      run: |
        echo "Use"
        echo
        echo "  SymbiFlow/actions/includes/python/publish-to-pypi-sheels-bin-linux"
        echo
        echo "for Linux"
        echo
        exit 1
    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install latest pip
      run: |
        pip install -U pip
    - name: Install packaging tooling
      run: |
        pip install twine wheel auditwheel build
    - name: üöß Build distribution üì¶
      run: |
        python -m build --wheel .
    - name: ‚úîÔ∏é Check üì¶
      shell: bash
      run: |
        for WHEEL in dist/*.whl; do
          echo
          echo "::group::Checking $WHEEL"
          echo
          python -m zipfile -t $WHEEL
          python -m zipfile -l $WHEEL
          echo
          if [ "$(uname)" = "Linux" ]; then
            auditwheel show $WHEEL
          fi
          echo
          twine check $WHEEL
          echo
          echo "::endgroup::"
        done
    - name: Upload wheel
      uses: actions/upload-artifact@v2
      with:
        name: wheels-${{ runner.os }}
        path: dist
    - name: üì§ Publish wheels to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TEST_PASSWORD }}
      if: ${{ env.TWINE_PASSWORD != null }}
      run: |
        twine upload --skip-existing --verbose --repository testpypi dist/*
    - name: üì§ Publish source to PyPI
      if: ${{ github.ref == 'refs/heads/master' && github.event_name != 'pull_request' && startsWith('SymbiFlow', github.repository) && env.TWINE_PASSWORD != null }}
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        twine upload dist/*
